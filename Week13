버전 되돌리기 reset

• reset
- > 커밋 이력에서 이전 특정 커밋으로 완전히 되돌아가는(roll back) 방법
- > 시계를 뒤로 맞추는 '타임 머신'과도 같음
- > 이동되는 해당 커밋 이후의 이력은 모두 사라지므로 주의가 필요
새로운 커밋이 생성되지 않음
- > 깃 저장소는 이전 커밋 내용으로 수정
다만 reset 이전에 있던 작업 폴더와 스테이지 영역에 내용을 어떻게 유지할지가 관건

                      HEAD
A ----> B ----> C ----> D
                    브랜치 main
git reset --hard HEAD~2
      HEAD
A ----> B
    브랜치 main

• reset의 3가지 옵션
- > --hard
이동되는 커밋의 내용으로 작업 폴더와 스테이지 영역, 깃 저장소를 모두 복사
- > --mixed(기본옵션)
이동되는 커밋의 내용으로 스테이지 영역과 깃 저장소 두 부분에 복사, 작업 폴더는 이전 내용 그대로 남음
- > --soft
이동되는 커밋의 내용으로 깃 저장소에만 복사, 스테이지 영역과 작업 폴더는 이전 내용 그대로 남음

• 커밋 되돌리기
- > --soft
돌아가려 했던 이력으로 되돌아갔지만 해당내용의 인덱스도 이전 그대로
commit만 필요
- > --mixed
이력은 되돌려지고, 인덱스도 되돌아가는 커밋의 내용으로 초기화
add, commit 필요
- > --hard
돌아가려는 이력 이후의 모든 내용을 삭제
파일 수정, add, commit 필요
- > 'ORIG_HEAD' 이용
$git reset --hard ORIG_HEAD

커밋 취소 revert

• 커밋 취소 revert
- > undo와 비슷한 기능
- > reset과 다르게 커밋할 것이 없고, 작업 영역이 깨끗해야 수행 가능
- > 커밋해온 모든 변경 사항들을 rollback
- > 이전의 커밋 히스토리는 그대로 유지, 되돌리는 새로운 커밋이 그 이후에 추가

• revert 충돌
- > 인자가 HEAD~와 같이 HEAD 이전을 취소하면 충돌이 발생할 수 있음
- > 충돌이 발생하지 않으려면 바로 이전 취소를 여러 번 계속
• 충돌 해결
- > 1. 파일 수정
- > 2. $git add file
- > 3. $git revert --continue
• 옵션 --no-edit
- > $git revert HEAD~
이동되는 커밋의 내용으로 작업 폴더와 스테이지 영역, 깃 저장소를 모두 복사하고 커밋 메시지를 수정하도록 편집기 실행
- > $git revert HEAD~ --no-edit
옵션 --no-edit으로 편집기 실행없이 커밋 메시지가 자동으로 'Revert "이전 커밋 메시지"'으로 지정되어 새로운 커밋 생성

• Reset vs Revert
- > 되돌리기와 취소
- > Reverting
지정된 이전 커밋을 취소하는 커밋이 생성
- > Resetting
지정된 이전 커밋으로 이동 (커밋 생성 X)

